name: Test Checks
on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'
    types: [opened, synchronize]

env:
  CADENCE: "commit"
  CLEARML_WEB_HOST: ${{ secrets.CLEARML_WEB_HOST }}
  CLEARML_API_HOST: ${{ secrets.CLEARML_API_HOST }}
  CLEARML_API_ACCESS_KEY: ${{ secrets.CLEARML_API_ACCESS_KEY }}
  CLEARML_FILES_HOST: ${{ secrets.CLEARML_FILES_HOST }}
  CLEARML_API_SECRET_KEY: ${{ secrets.CLEARML_API_SECRET_KEY }}

jobs:
  base-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - uses: actions/checkout@v4
      - name: "‚öôÔ∏è Install dependencies"
        run: pip3 install -U pip setuptools && pip3 install .[dev]
      - uses: actions/checkout@v4
        with:
          repository: "neuralmagic/compressed-tensors"
          path: "compressed-tensors"
      - name: "‚öôÔ∏è Install compressed-tensors dependencies"
        run: |
          pip3 uninstall -y compressed-tensors compressed-tensors-nightly
          pip3 install ./compressed-tensors/
      - name: "Clean compressed-tensors directory"
        run: rm -r compressed-tensors/
      - name: "üî¨ Running base tests"
        run: make test
  pytorch-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/checkout@v4
      - name: "‚öôÔ∏è Install dependencies"
        run: pip3 install -U pip setuptools && pip3 install .[dev]
      - uses: actions/checkout@v4
        with:
          repository: "neuralmagic/compressed-tensors"
          path: "compressed-tensors"
      - name: "‚öôÔ∏è Install compressed-tensors dependencies"
        run: |
          pip3 uninstall -y compressed-tensors compressed-tensors-nightly
          pip3 install ./compressed-tensors/
      - name: "Clean compressed-tensors directory"
        run: rm -r compressed-tensors/
      - name: "üî¨ Running pytorch tests"
        run: |
          pytest -v tests/llmcompressor/pytorch
  compat-pytorch-1_9-pytorch-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/checkout@v4
      - name: "‚öôÔ∏è Install dependencies"
        run: pip3 install -U pip setuptools && pip3 install .[dev]
      - uses: actions/checkout@v4
        with:
          repository: "neuralmagic/compressed-tensors"
          path: "compressed-tensors"
      - name: "‚öôÔ∏è Install compressed-tensors dependencies"
        run: |
          pip3 uninstall -y compressed-tensors compressed-tensors-nightly
          pip3 install ./compressed-tensors/
      - name: "Clean compressed-tensors directory"
        run: rm -r compressed-tensors/
      - name: "üî¨ Running pytorch tests"
        run: |
          pytest -v tests/llmcompressor/pytorch
  transformers-tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - uses: actions/checkout@v4
      - name: "‚öôÔ∏è Install dependencies"
        run: pip3 install -U pip setuptools && pip3 install .[dev]
      - uses: actions/checkout@v4
        with:
          repository: "neuralmagic/compressed-tensors"
          path: "compressed-tensors"
      - name: "‚öôÔ∏è Install compressed-tensors dependencies"
        id: install
        run: |
          pip3 uninstall -y compressed-tensors compressed-tensors-nightly
          pip3 install ./compressed-tensors/
      - name: "Clean compressed-tensors directory"
        run: rm -r compressed-tensors/
      - name: "üî¨ Running transformers tests"
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest -v tests/llmcompressor/transformers/compression
      - name: Run Finetune Tests
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest -v tests/llmcompressor/transformers/finetune -m unit
      - name: Running GPTQ Tests
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest -v tests/llmcompressor/transformers/gptq
      - name: Running ONESHOT Tests
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest -v tests/llmcompressor/transformers/oneshot
      - name: Running Sparsification Tests
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest tests/llmcompressor/transformers/sparsification -v
          pytest tests/llmcompressor/transformers/test_clear_ml.py -v
      - name: Running OBCQ Tests
        if: (success() || failure()) && steps.install.outcome == 'success'
        run: |
          pytest -v tests/llmcompressor/transformers/obcq
